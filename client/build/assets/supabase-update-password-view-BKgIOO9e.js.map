{"version":3,"file":"supabase-update-password-view-BKgIOO9e.js","sources":["../../src/lib/supabase.js","../../src/auth/context/supabase/action.jsx","../../src/auth/view/supabase/supabase-sign-in-view.jsx","../../src/auth/view/supabase/supabase-sign-up-view.jsx","../../src/auth/view/supabase/supabase-reset-password-view.jsx","../../src/auth/view/supabase/supabase-update-password-view.jsx"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nimport { CONFIG } from 'src/config-global';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst isSupabase = CONFIG.auth.method === 'supabase';\r\n\r\nconst supabaseUrl = CONFIG.supabase.url;\r\nconst supabaseKey = CONFIG.supabase.key;\r\n\r\nexport const supabase = isSupabase ? createClient(supabaseUrl, supabaseKey) : {};\r\n","import { paths } from 'src/routes/paths';\r\n\r\nimport { supabase } from 'src/lib/supabase';\r\n\r\n/** **************************************\r\n * Sign in\r\n *************************************** */\r\nexport const signInWithPassword = async ({ email, password }) => {\r\n  const { data, error } = await supabase.auth.signInWithPassword({ email, password });\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n\r\n  return { data, error };\r\n};\r\n\r\n/** **************************************\r\n * Sign up\r\n *************************************** */\r\nexport const signUp = async ({ email, password, firstName, lastName }) => {\r\n  const { data, error } = await supabase.auth.signUp({\r\n    email,\r\n    password,\r\n    options: {\r\n      emailRedirectTo: `${window.location.origin}${paths.dashboard.root}`,\r\n      data: { display_name: `${firstName} ${lastName}` },\r\n    },\r\n  });\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n\r\n  if (!data?.user?.identities?.length) {\r\n    throw new Error('This user already exists');\r\n  }\r\n\r\n  return { data, error };\r\n};\r\n\r\n/** **************************************\r\n * Sign out\r\n *************************************** */\r\nexport const signOut = async () => {\r\n  const { error } = await supabase.auth.signOut();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n\r\n  return { error };\r\n};\r\n\r\n/** **************************************\r\n * Reset password\r\n *************************************** */\r\nexport const resetPassword = async ({ email }) => {\r\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\r\n    redirectTo: `${window.location.origin}${paths.auth.supabase.updatePassword}`,\r\n  });\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n\r\n  return { data, error };\r\n};\r\n\r\n/** **************************************\r\n * Update password\r\n *************************************** */\r\nexport const updatePassword = async ({ password }) => {\r\n  const { data, error } = await supabase.auth.updateUser({ password });\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n\r\n  return { data, error };\r\n};\r\n","import { z as zod } from 'zod';\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Alert from '@mui/material/Alert';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\nimport { RouterLink } from 'src/routes/components';\r\n\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n\r\nimport { Iconify } from 'src/components/iconify';\r\nimport { Form, Field } from 'src/components/hook-form';\r\n\r\nimport { useAuthContext } from '../../hooks';\r\nimport { FormHead } from '../../components/form-head';\r\nimport { signInWithPassword } from '../../context/supabase';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport const SignInSchema = zod.object({\r\n  email: zod\r\n    .string()\r\n    .min(1, { message: 'Email is required!' })\r\n    .email({ message: 'Email must be a valid email address!' }),\r\n  password: zod\r\n    .string()\r\n    .min(1, { message: 'Password is required!' })\r\n    .min(6, { message: 'Password must be at least 6 characters!' }),\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function SupabaseSignInView() {\r\n  const router = useRouter();\r\n\r\n  const { checkUserSession } = useAuthContext();\r\n\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const password = useBoolean();\r\n\r\n  const defaultValues = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: zodResolver(SignInSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await signInWithPassword({ email: data.email, password: data.password });\r\n      await checkUserSession?.();\r\n\r\n      router.refresh();\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMsg(typeof error === 'string' ? error : error.message);\r\n    }\r\n  });\r\n\r\n  const renderForm = (\r\n    <Box gap={3} display=\"flex\" flexDirection=\"column\">\r\n      <Field.Text name=\"email\" label=\"Email address\" InputLabelProps={{ shrink: true }} />\r\n\r\n      <Box gap={1.5} display=\"flex\" flexDirection=\"column\">\r\n        <Link\r\n          component={RouterLink}\r\n          href={paths.auth.supabase.resetPassword}\r\n          variant=\"body2\"\r\n          color=\"inherit\"\r\n          sx={{ alignSelf: 'flex-end' }}\r\n        >\r\n          Forgot password?\r\n        </Link>\r\n\r\n        <Field.Text\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          placeholder=\"6+ characters\"\r\n          type={password.value ? 'text' : 'password'}\r\n          InputLabelProps={{ shrink: true }}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={password.onToggle} edge=\"end\">\r\n                  <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        color=\"inherit\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        loadingIndicator=\"Sign in...\"\r\n      >\r\n        Sign in\r\n      </LoadingButton>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FormHead\r\n        title=\"Sign in to your account\"\r\n        description={\r\n          <>\r\n            {`Donâ€™t have an account? `}\r\n            <Link component={RouterLink} href={paths.auth.supabase.signUp} variant=\"subtitle2\">\r\n              Get started\r\n            </Link>\r\n          </>\r\n        }\r\n        sx={{ textAlign: { xs: 'center', md: 'left' } }}\r\n      />\r\n\r\n      {!!errorMsg && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {errorMsg}\r\n        </Alert>\r\n      )}\r\n\r\n      <Form methods={methods} onSubmit={onSubmit}>\r\n        {renderForm}\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n","import { z as zod } from 'zod';\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Alert from '@mui/material/Alert';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\nimport { RouterLink } from 'src/routes/components';\r\n\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n\r\nimport { Iconify } from 'src/components/iconify';\r\nimport { Form, Field } from 'src/components/hook-form';\r\n\r\nimport { signUp } from '../../context/supabase';\r\nimport { FormHead } from '../../components/form-head';\r\nimport { SignUpTerms } from '../../components/sign-up-terms';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport const SignUpSchema = zod.object({\r\n  firstName: zod.string().min(1, { message: 'First name is required!' }),\r\n  lastName: zod.string().min(1, { message: 'Last name is required!' }),\r\n  email: zod\r\n    .string()\r\n    .min(1, { message: 'Email is required!' })\r\n    .email({ message: 'Email must be a valid email address!' }),\r\n  password: zod\r\n    .string()\r\n    .min(1, { message: 'Password is required!' })\r\n    .min(6, { message: 'Password must be at least 6 characters!' }),\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function SupabaseSignUpView() {\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const router = useRouter();\r\n\r\n  const password = useBoolean();\r\n\r\n  const defaultValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: zodResolver(SignUpSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await signUp({\r\n        email: data.email,\r\n        password: data.password,\r\n        firstName: data.firstName,\r\n        lastName: data.lastName,\r\n      });\r\n\r\n      router.push(paths.auth.supabase.verify);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMsg(typeof error === 'string' ? error : error.message);\r\n    }\r\n  });\r\n\r\n  const renderForm = (\r\n    <Box gap={3} display=\"flex\" flexDirection=\"column\">\r\n      <Box display=\"flex\" gap={{ xs: 3, sm: 2 }} flexDirection={{ xs: 'column', sm: 'row' }}>\r\n        <Field.Text name=\"firstName\" label=\"First name\" InputLabelProps={{ shrink: true }} />\r\n        <Field.Text name=\"lastName\" label=\"Last name\" InputLabelProps={{ shrink: true }} />\r\n      </Box>\r\n\r\n      <Field.Text name=\"email\" label=\"Email address\" InputLabelProps={{ shrink: true }} />\r\n\r\n      <Field.Text\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        placeholder=\"6+ characters\"\r\n        type={password.value ? 'text' : 'password'}\r\n        InputLabelProps={{ shrink: true }}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton onClick={password.onToggle} edge=\"end\">\r\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        color=\"inherit\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        loadingIndicator=\"Create account...\"\r\n      >\r\n        Create account\r\n      </LoadingButton>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FormHead\r\n        title=\"Get started absolutely free\"\r\n        description={\r\n          <>\r\n            {`Already have an account? `}\r\n            <Link component={RouterLink} href={paths.auth.supabase.signIn} variant=\"subtitle2\">\r\n              Get started\r\n            </Link>\r\n          </>\r\n        }\r\n        sx={{ textAlign: { xs: 'center', md: 'left' } }}\r\n      />\r\n\r\n      {!!errorMsg && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {errorMsg}\r\n        </Alert>\r\n      )}\r\n\r\n      <Form methods={methods} onSubmit={onSubmit}>\r\n        {renderForm}\r\n      </Form>\r\n\r\n      <SignUpTerms />\r\n    </>\r\n  );\r\n}\r\n","import { z as zod } from 'zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\n\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\n\r\nimport { PasswordIcon } from 'src/assets/icons';\r\n\r\nimport { Form, Field } from 'src/components/hook-form';\r\n\r\nimport { FormHead } from '../../components/form-head';\r\nimport { resetPassword } from '../../context/supabase';\r\nimport { FormReturnLink } from '../../components/form-return-link';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport const ResetPasswordSchema = zod.object({\r\n  email: zod\r\n    .string()\r\n    .min(1, { message: 'Email is required!' })\r\n    .email({ message: 'Email must be a valid email address!' }),\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function SupabaseResetPasswordView() {\r\n  const router = useRouter();\r\n\r\n  const defaultValues = {\r\n    email: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: zodResolver(ResetPasswordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await resetPassword({ email: data.email });\r\n\r\n      router.push(paths.auth.supabase.verify);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  const renderForm = (\r\n    <Box gap={3} display=\"flex\" flexDirection=\"column\">\r\n      <Field.Text\r\n        autoFocus\r\n        name=\"email\"\r\n        label=\"Email address\"\r\n        placeholder=\"example@gmail.com\"\r\n        InputLabelProps={{ shrink: true }}\r\n      />\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        loadingIndicator=\"Send request...\"\r\n      >\r\n        Send request\r\n      </LoadingButton>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FormHead\r\n        icon={<PasswordIcon />}\r\n        title=\"Forgot your password?\"\r\n        description={`Please enter the email address associated with your account and we'll email you a link to reset your password.`}\r\n      />\r\n\r\n      <Form methods={methods} onSubmit={onSubmit}>\r\n        {renderForm}\r\n      </Form>\r\n\r\n      <FormReturnLink href={paths.auth.supabase.signIn} />\r\n    </>\r\n  );\r\n}\r\n","import { z as zod } from 'zod';\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Alert from '@mui/material/Alert';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport { paths } from 'src/routes/paths';\r\nimport { useRouter } from 'src/routes/hooks';\r\n\r\nimport { useBoolean } from 'src/hooks/use-boolean';\r\n\r\nimport { NewPasswordIcon } from 'src/assets/icons';\r\n\r\nimport { Iconify } from 'src/components/iconify';\r\nimport { Form, Field } from 'src/components/hook-form';\r\n\r\nimport { FormHead } from '../../components/form-head';\r\nimport { updatePassword } from '../../context/supabase';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport const UpdatePasswordSchema = zod\r\n  .object({\r\n    password: zod\r\n      .string()\r\n      .min(1, { message: 'Password is required!' })\r\n      .min(6, { message: 'Password must be at least 6 characters!' }),\r\n    confirmPassword: zod.string().min(1, { message: 'Confirm password is required!' }),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: 'Passwords do not match!',\r\n    path: ['confirmPassword'],\r\n  });\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function SupabaseUpdatePasswordView() {\r\n  const router = useRouter();\r\n\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const password = useBoolean();\r\n\r\n  const defaultValues = { password: '', confirmPassword: '' };\r\n\r\n  const methods = useForm({\r\n    resolver: zodResolver(UpdatePasswordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      await updatePassword({ password: data.password });\r\n\r\n      router.push(paths.dashboard.root);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMsg(typeof error === 'string' ? error : error.message);\r\n    }\r\n  });\r\n\r\n  const renderForm = (\r\n    <Box gap={3} display=\"flex\" flexDirection=\"column\">\r\n      <Field.Text\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        placeholder=\"6+ characters\"\r\n        type={password.value ? 'text' : 'password'}\r\n        InputLabelProps={{ shrink: true }}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton onClick={password.onToggle} edge=\"end\">\r\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      <Field.Text\r\n        name=\"confirmPassword\"\r\n        label=\"Confirm password\"\r\n        type={password.value ? 'text' : 'password'}\r\n        InputLabelProps={{ shrink: true }}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton onClick={password.onToggle} edge=\"end\">\r\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        type=\"submit\"\r\n        size=\"large\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        loadingIndicator=\"Update password...\"\r\n      >\r\n        Update password\r\n      </LoadingButton>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FormHead\r\n        icon={<NewPasswordIcon />}\r\n        title=\"Update password\"\r\n        description=\"Successful updates enable access using the new password.\"\r\n      />\r\n\r\n      {!!errorMsg && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {errorMsg}\r\n        </Alert>\r\n      )}\r\n\r\n      <Form methods={methods} onSubmit={onSubmit}>\r\n        {renderForm}\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n"],"names":["supabase","signInWithPassword","email","password","data","error","signUp","firstName","lastName","paths","_b","_a","resetPassword","updatePassword","SignInSchema","zod","SupabaseSignInView","router","useRouter","checkUserSession","useAuthContext","errorMsg","setErrorMsg","useState","useBoolean","defaultValues","methods","useForm","zodResolver","handleSubmit","isSubmitting","onSubmit","renderForm","Box","jsx","Field","Link","RouterLink","InputAdornment","IconButton","Iconify","LoadingButton","jsxs","Fragment","FormHead","Alert","Form","SignUpSchema","SupabaseSignUpView","SignUpTerms","ResetPasswordSchema","SupabaseResetPasswordView","PasswordIcon","FormReturnLink","UpdatePasswordSchema","SupabaseUpdatePasswordView","NewPasswordIcon"],"mappings":"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"}